import java.io.IOException;
import java.util.Scanner;
import java.net.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.*;
import java.util.ArrayList;

public class ReadWebPage 
{
   public static int startx = 0;
   public static String inputPageUrl;
   public static String htmlContent;
   public static int startz = 0;
        
   public static void main(String[] args) throws IOException, InterruptedException {
      ArrayList<ArrayList<String>> recipes = new ArrayList<ArrayList<String>>();
      ArrayList<String> pageUrls = new ArrayList<String>();

      pageUrls.add("https://www.surlatable.com/recipes/?srule=best-matches&start=0&sz=24");
      pageUrls.add("https://www.surlatable.com/recipes/?srule=best-matches&start=24&sz=24");
      pageUrls.add("https://www.surlatable.com/recipes/?srule=best-matches&start=48&sz=24");
      pageUrls.add("https://www.surlatable.com/recipes/?srule=best-matches&start=72&sz=24");
      
      
      int size1 = 1;
      int j=0;
        
      for(int a=0; a<size1; a++)
      {
         ArrayList<String> filler = new ArrayList<String>(7);
         recipes.add(filler);
      }
      
      final ReadWebPage scraper = new ReadWebPage();
        
        for(int i=0; i<pageUrls.size(); i++)
        {
          inputPageUrl = pageUrls.get(i);
          htmlContent = scraper.getContent(inputPageUrl);
          
          for(; j<size1; j++)
          {
            //get first arraylist and then add recipe url to the filler arraylist 
            recipes.get(j).add(scraper.extractRecipeUrl(htmlContent));
            final String recipeContent = scraper.getRecipeContent(recipes.get(i).get(0));
            recipes.get(i).add(scraper.extractPath(recipeContent, 0));
            recipes.get(i).add(scraper.extractTitle(recipeContent));
            recipes.get(i).add(scraper.extractAuthor(recipeContent));
            recipes.get(i).add(scraper.extractServings(recipeContent));
            recipes.get(i).add(scraper.extractIngredients(recipeContent));
            recipes.get(i).add(scraper.extractProcedure(recipeContent));

            if(j==23 || j== 47 || j==71)
               startx=0;
          }
        }
        
      System.out.println(recipes.get(0).get(1));
      /*System.out.println(recipes.get(0).get(2));
      System.out.println(recipes.get(0).get(3));
      System.out.println(recipes.get(0).get(4));
      System.out.println(recipes.get(0).get(5));*/

      //System.out.println(recipes.get().get(0));
      //System.out.println(recipes.get(23).get(0));
      //System.out.println(recipes.get(0).get(1));
   }
        
   
   private String getContent(String url) throws IOException 
   { 
      try
      {
         HttpClient client = HttpClient.newHttpClient();
         String urlToScrape = url;
         HttpRequest request =  HttpRequest.newBuilder().uri(URI.create(urlToScrape)).build();
         HttpResponse<String> response = client.send(request,HttpResponse.BodyHandlers.ofString());
         return response.body();
      }
      catch (InterruptedException e)
      {
         System.out.println(e);
      }
      return null;   
   }

   private String extractRecipeUrl(String content) 
   {
      final Pattern recipeUrlRegExp = Pattern.compile("<a class=\"thumb-link\" href=\"(.*?)\" title", Pattern.DOTALL);
      final Matcher matcher = recipeUrlRegExp.matcher(content);
      matcher.find(startx);
      startx = matcher.start()+20;
      
      return matcher.group(1);
   }
   
   private String getRecipeContent(String recipe) throws IOException
   {
      try
      {
        HttpClient client = HttpClient.newHttpClient();
        String urlToScrape = recipe;
        HttpRequest request =  HttpRequest.newBuilder().uri(URI.create(urlToScrape)).build();
        HttpResponse<String> response = client.send(request,HttpResponse.BodyHandlers.ofString());
        return response.body();      
      }
      catch (InterruptedException e)
      {
        System.out.println(e);
      }
      return null;   
   }
      
   //extract the author for each recipe
   private String extractAuthor(String content) 
   {
      //retrieve author 
      final Pattern authorRegExp = Pattern.compile("<div class=\"recipe-author\">\n(.*?)\n</div>", Pattern.DOTALL);
      final Matcher matcher = authorRegExp.matcher(content);
      matcher.find();
      return matcher.group(1);
    }
    
    private String extractTitle(String content)
    {
      //retrieve Title 
      final Pattern authorRegExp = Pattern.compile("<title>(.*?)</title>", Pattern.DOTALL);
      final Matcher matcher = authorRegExp.matcher(content);
      matcher.find();
      return matcher.group(1);
    }
    //extract the servings for each recipe 
    private String extractIngredients(String content) 
    {
      final Pattern servingsRegExp = Pattern.compile("<div class=\"recipe-details-ingredients\">\n(.*?)\n</div>", Pattern.DOTALL);
      final Matcher matcher = servingsRegExp.matcher(content);
      matcher.find();
      return matcher.group(1);
    }
    
    //retreive Procedure
    private String extractProcedure(String content)
    {
      final Pattern servingsRegExp = Pattern.compile("<div class=\"recipe-details-procedure\">\n(.*?)\n</div>", Pattern.DOTALL);
      final Matcher matcher = servingsRegExp.matcher(content);
      matcher.find();
      return matcher.group(1);
    }
    
    //retreieve Serving Size
    private String extractServings(String content)
    {
      final Pattern servingsRegExp = Pattern.compile("<div class=\"recipe-details-serves\">\n(.*?)\n</div>", Pattern.DOTALL);
      final Matcher matcher = servingsRegExp.matcher(content);
      matcher.find();
      return matcher.group(1);
    }
    
    private String extractPath(String content, int startz)
    {
      Pattern pathRegExp = Pattern.compile("<a class=\"breadcrumb-element\" href=\".*?\" title=\".*?\">(.*?)</a>", Pattern.DOTALL);
      String group1 = "";
      String group2 = "";
      String path = "";
      Matcher matcher = pathRegExp.matcher(content);
      
      for(int i=0; i<4; i++)
      {
         //System.out.println(startz);
         matcher.find(startz);
         group1 = matcher.group(1);
         startz = matcher.start()+50;
      }
      
      pathRegExp = Pattern.compile("<span class=\"breadcrumb-element\">(.*?)</span>", Pattern.DOTALL);
      matcher = pathRegExp.matcher(content);
      
      matcher.find();
      group2 = matcher.group(1);
      

      path += group1 + "/" + group2 ;

         //servingsRegExp = Pattern.compile("\"primaryCategory\":\"(.*?)\"", Pattern.DOTALL);
     
      return path;
    }
   
      
      
    
}
